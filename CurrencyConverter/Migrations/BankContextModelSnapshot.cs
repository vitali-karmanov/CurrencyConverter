// <auto-generated />
using System;
using CurrencyConverter;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CurrencyConverter.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CurrencyConverter.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyHistoricalId")
                        .HasColumnType("int");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CurrencyHistoricalId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("CurrencyConverter.Historical", b =>
                {
                    b.Property<int>("HistoricalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.HasKey("HistoricalId");

                    b.ToTable("Historical");
                });

            modelBuilder.Entity("CurrencyConverter.Currency", b =>
                {
                    b.HasOne("CurrencyConverter.Historical", "Historical")
                        .WithMany("Currencies")
                        .HasForeignKey("CurrencyHistoricalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
